# -*- coding: utf-8 -*-
"""Untitled29.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jQJdq9lkH_IyymKfnj-6ZLVOu4JdN6Az
"""

# -------------------------------------------------------------------------
# AUTHOR: Nhi Nguyen
# FILENAME: title of the source file
# SPECIFICATION: description of the program
# FOR: CS 5990 (Advanced Data Mining) - Assignment #2
# TIME SPENT: how long it took you to complete the assignment
# -----------------------------------------------------------*/

from sklearn import tree
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score

# change the path on your end to read the file
dataSets = ['content/cheat_training_1.csv', 'content/cheat_training_2.csv']

# helper function to clean the dataset
def wrangle(df):
  # convert feature 'Refund' into numerical value
  df['Refund'] = df['Refund'].apply(lambda x: 1 if x == "No" else 2)
  # convert feature ‘Taxable Income’ into float
  df['Taxable Income'] = df['Taxable Income'].str.replace('k','').astype('float')
  # one hot encoding feature ‘Marital Status’
  df = pd.get_dummies(df, columns = ['Marital Status'])
  # convert feature 'Cheat' into numerical value with Yes = 1, No = 2
  df['Cheat'] = df['Cheat'].apply(lambda x: 1 if x == "Yes" else 2)
  return df


for idx, ds in enumerate(dataSets):
  X = []
  Y = []
  scores = 0
  df = pd.read_csv(ds, sep=',', header=0)  #reading a dataset eliminating the header (Pandas library)
  df = df.iloc[:, 1:] #df without the id
  df = wrangle(df)
  Y = df['Cheat'] # Y_train: ground truth
  X = df.drop('Cheat', axis=1) # X_train: features

  #loop your training and test tasks 10 times here
  for i in range (10):

    #fitting the decision tree to the data by using Gini index and no max_depth
    clf = tree.DecisionTreeClassifier(criterion = 'gini', max_depth=None)
    clf = clf.fit(X, Y)

    #plotting the decision tree
    tree.plot_tree(clf, feature_names=['Refund', 'Single', 'Divorced', 'Married', 'Taxable Income'], class_names=['Yes','No'], filled=True, rounded=True)
    plt.show()

    #read the test data and add this data to data_test
    data_test = pd.read_csv('content/cheat_test.csv', sep=',', header=0)   #reading a dataset eliminating the header (Pandas library)
    data_test = data_test.iloc[:, 1:] # data_test without the id
    data_test = wrangle(data_test)
    Y_test = data_test['Cheat']
    X_test = data_test.drop('Cheat', axis=1)
    class_predicted = clf.predict(X_test)

    # compare the prediction with the true label
    score = accuracy_score(Y_test, class_predicted)
    print(score)

    # find the average accuracy of this model during the 10 runs
    scores += score

  # print the accuracy of this model during the 10 runs (training and test set).
  print(f"\nFinal accuracy when training on cheat_training_{idx+1}.csv: = {scores/10:.2f}")